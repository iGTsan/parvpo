events {
    worker_connections 10024;
    # multi_accept on;
}

http {
    upstream consumer1 {
        server consumer1:8080;
    }
    upstream consumer2 {
        server consumer2:8080;
    }
    upstream consumer3 {
        server consumer3:8080;
    }
    upstream consumer4 {
        server consumer4:8080;
    }
    upstream consumer5 {
        server consumer5:8080;
    }
    upstream consumer6 {
        server consumer6:8080;
    }
    upstream consumer7 {
        server consumer7:8080;
    }
    upstream consumer8 {
        server consumer8:8080;
    }
    upstream consumer9 {
        server consumer9:8080;
    }
    upstream blackhole {
        server blackhole:8080;
    }
    upstream backend {
        least_conn;
        server consumer1:8080;
        server consumer2:8080;
        server consumer3:8080;
        server consumer4:8080;
        server consumer5:8080;
        server consumer6:8080;
        server consumer7:8080;
        server consumer8:8080;
        server consumer9:8080;
    }
    # Define maps for routing logic
    map $arg_message_row $backend_pool_row1 {
        ~^([0])$ "consumer1";
        ~^([1])$ "consumer4";
        ~^([2])$ "consumer7";
        default "error in row1"; # Default case for no match
    }

    map $arg_message_coloumn $backend_pool_col1 {
        ~^([0])$ "consumer1";
        ~^([1])$ "consumer2";
        ~^([2])$ "consumer3";
        default "error in col1"; # Default case for no match
    }
    # Define maps for routing logic
    map $arg_message_row $backend_pool_row2 {
        ~^([0])$ "consumer2";
        ~^([1])$ "consumer5";
        ~^([2])$ "consumer8";
        default "error in row2"; # Default case for no match
    }

    map $arg_message_coloumn $backend_pool_col2 {
        ~^([0])$ "consumer4";
        ~^([1])$ "consumer5";
        ~^([2])$ "consumer6";
        default "error in col2"; # Default case for no match
    }
    # Define maps for routing logic
    map $arg_message_row $backend_pool_row3 {
        ~^([0])$ "consumer3";
        ~^([1])$ "consumer6";
        ~^([2])$ "consumer9";
        default "error in row3"; # Default case for no match
    }

    map $arg_message_coloumn $backend_pool_col3 {
        ~^([0])$ "consumer7";
        ~^([1])$ "consumer8";
        ~^([2])$ "consumer9";
        default "error in col3"; # Default case for no match
    }

    
    server {
        listen 8080;

        access_log off;

        # location = /mirror13 {
        #     internal;
        #     proxy_pass http://$backend_pool$request_uri;
        # }
        location = /mirror1 {
            internal;
            proxy_pass http://$backend_pool1$request_uri;
        }
        location = /mirror2 {
            internal;
            proxy_pass http://$backend_pool2$request_uri;
        }
        location = /mirror3 {
            internal;
            if ($backend_pool3 = "") {
                set $backend_pool3 "error in mirror3";
            }
            proxy_pass http://$backend_pool3$request_uri;
        }
        location = /mirror4 {
            internal;
            proxy_pass http://$backend_pool4$request_uri;
        }
        location = /mirror5 {
            internal;
            proxy_pass http://$backend_pool5$request_uri;
        }
        location = /mirror6 {
            internal;
            proxy_pass http://$backend_pool6$request_uri;
        }
        location = /mirror7 {
            internal;
            proxy_pass http://$backend_pool7$request_uri;
        }
        location = /mirror8 {
            internal;
            proxy_pass http://$backend_pool8$request_uri;
        }
        location = /mirror9 {
            internal;
            proxy_pass http://$backend_pool9$request_uri;
        }
        location = /mirror_hole {
            internal;
            proxy_pass http://blackhole;
        }

        location / {
            set $backend_pool3 "backend_pool3 start";

            if ($arg_pdtype = "1") {
                set $backend_pool1 $backend_pool_row1;
                set $backend_pool2 $backend_pool_row2;
                set $backend_pool3 $backend_pool_row3;
            }

            if ($arg_pdtype = "2") {
                set $backend_pool1 $backend_pool_col1;
                set $backend_pool2 $backend_pool_col2;
                set $backend_pool3 $backend_pool_col3;
            }

            # if ($backend_pool1 = "") {
            #     return 502;  # можно выбрать другой HTTP код при отсутствии подходящего backend
            # }

            mirror /mirror1;
            mirror /mirror2;
            mirror /mirror3;

            proxy_pass http://blackhole;
        }

        location /end {
            set $backend_pool1 "consumer1";
            mirror /mirror1;
            set $backend_pool2 "consumer2";
            mirror /mirror2;
            set $backend_pool3 "consumer3";
            mirror /mirror3;
            set $backend_pool4 "consumer4";
            mirror /mirror4;
            set $backend_pool5 "consumer5";
            mirror /mirror5;
            set $backend_pool6 "consumer6";
            mirror /mirror6;
            set $backend_pool7 "consumer7";
            mirror /mirror7;
            set $backend_pool8 "consumer8";
            mirror /mirror8;
            set $backend_pool9 "consumer9";
            mirror /mirror9;
            proxy_pass http://blackhole;
        }
    }
}
